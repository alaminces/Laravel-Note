<?php

namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use App\Http\Requests\AppearanceSettingUpdateRequest;
use App\Http\Requests\GeneralSettingUpdateRequest;
use App\Http\Requests\MailSettingUpdateRequest;
use App\Models\Setting;
use Illuminate\Http\Request;
use File;

class SettingController extends Controller
{
    // index method
    public function index() {
        return view('admin.settings.index');
    }

    // general setting method
    public function general_setting(GeneralSettingUpdateRequest $request) {
        
        Setting::updateOrCreate(
            ['name'=>'site_title'],
            ['value' => $request->site_title]
        );

        Setting::updateOrCreate(
            ['name'=>'site_address'],
            ['value'=>$request->site_address]
        );
        Setting::updateOrCreate(
            ['name'=>'site_phone'],
            ['value'=>$request->site_phone]
        );

        Setting::updateOrCreate(
            ['name'=>'site_facebook_link'],
            ['value'=>$request->site_facebook_link]
        );
        Setting::updateOrCreate(
            ['name'=>'site_twitter_link'],
            ['value'=>$request->site_twitter_link]
        );
        Setting::updateOrCreate(
            ['name'=>'site_instragram_link'],
            ['value'=>$request->site_instragram_link]
        );
        Setting::updateOrCreate(
            ['name'=>'site_description'],
            ['value'=>$request->site_description]
        );


        return redirect()->back()->with('success','General Settings Saved!');
    }

    // appearance setting method
    public function appearance_setting(AppearanceSettingUpdateRequest $request) {
        Setting::updateOrCreate(
            ['name' => 'bg_color'],
            ['value' => $request->bg_color]
        );

        if($request->hasFile('site_logo')) {

            $this->deleteOldFile(setting('site_logo'));

            $file = $request->file('site_logo');
            $extension = $file->getClientOriginalExtension();
            $fileName = 'logo'.'.'.$extension;

            Setting::updateOrCreate([
                'name' => 'site_logo',
            ],[
                'value' => "uploads/system/".$fileName,
            ]);

            $file->move(public_path('uploads/system'),$fileName);
        }
        

        if($request->hasFile('site_favicon')) {

            $this->deleteOldFile(setting('site_favicon'));

            $file = $request->file('site_favicon');
            $extension = $file->getClientOriginalExtension();
            $fileName = 'favicon'.'.'.$extension;

            Setting::updateOrCreate([
                'name' => 'site_favicon',
            ],[
                'value' => "uploads/system/".$fileName,
            ]);

            $file->move(public_path('uploads/system'),$fileName);
        }
        return redirect()->back()->with('success','Appearance Settings Saved!');
    }

    private function deleteOldFile($path) {
        if(File::exists($path)) {
            File::delete($path);
        }
    }

    public function mail_setting(MailSettingUpdateRequest $request) {
        Setting::updateOrCreate(
            ['name'=>'mail_mailer'],
            ['value'=>$request->mail_mailer]
        );
        Setting::updateOrCreate(
            ['name'=>'mail_host'],
            ['value'=>$request->mail_host]
        );
        Setting::updateOrCreate(
            ['name'=>'mail_port'],
            ['value'=>$request->mail_port]
        );
        Setting::updateOrCreate(
            ['name'=>'mail_username'],
            ['value'=>$request->mail_username]
        );
        Setting::updateOrCreate(
            ['name'=>'mail_password'],
            ['value'=>$request->mail_password]
        );
        Setting::updateOrCreate(
            ['name'=>'mail_encryption'],
            ['value'=>$request->mail_encryption]
        );
        Setting::updateOrCreate(
            ['name'=>'mail_from_address'],
            ['value'=>$request->mail_from_address]
        );


        
        // update env file
        $this->setEnvValue('MAIL_MAILER',$request->mail_mailer);
        $this->setEnvValue('MAIL_HOST',$request->mail_host);
        $this->setEnvValue('MAIL_PORT',$request->mail_port);
        $this->setEnvValue('MAIL_USERNAME',$request->mail_username);
        $this->setEnvValue('MAIL_PASSWORD',$request->mail_password);
        $this->setEnvValue('MAIL_ENCRYPTION',$request->mail_encryption);
        $this->setEnvValue('MAIL_FROM_ADDRESS',$request->mail_from_address);

        return redirect()->back()->with('success','Mail Settings Saved!');
    }

    protected function setEnvValue(string $key, string $value)
    {
        $path = app()->environmentFilePath();
        $env = file_get_contents($path);

        $old_value = env($key);

        if (!str_contains($env, $key.'=')) {
            $env .= sprintf("%s=%s\n", $key, $value);
        } else if ($old_value) {
            $env = str_replace(sprintf('%s=%s', $key, $old_value), sprintf('%s=%s', $key, $value), $env);
        } else {
            $env = str_replace(sprintf('%s=', $key), sprintf('%s=%s',$key, $value), $env);
        }

        file_put_contents($path, $env);
    }
}
