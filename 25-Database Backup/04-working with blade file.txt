# Create a controller
php artisan make:controller BackupController

# display backup data

Routes :
=============================================
Route::get('/backup', [BackupController::class,'index']);
Route::post('/backup', [BackupController::class,'store'])->name('store');
Route::get('/download', [BackupController::class,'download'])->name('download');
Route::delete('/backup/delete',[BackupController::class,'destroy'])->name('destroy');

Methods :
=============================================
public function index() {
	$disk = Storage::disk(config('backup.backup.destination.disks')[0]);
	$files = $disk->files(config('backup.backup.name'));


	$backups = [];

	foreach($files as $file) {
		if( substr($file,-4,)=='.zip' && $disk->exists($file) ) {
			$app_name = config('backup.backup.name')."/";
			$file_name = str_replace($app_name,"",$file);
			$backups[] = [
				'file_name' => $file_name,
				'file_path' => $file,
				'file_size' => $this->byteToHuman($disk->size($file)),
				'created_at'=> Carbon::parse($disk->lastModified($file))->diffForHumans(),
			];
		}
	}
	

	return view('admin.backup.index',compact('backups'));
}

private function byteToHuman($bytes) {
	$units = ['B','KB','MB','GB','TB','PB'];

	for($i=0; $bytes>1024; $i++) {
		$bytes = $bytes / 1024;
	}

	return round($bytes, 2) ." ".$units[$i];
}



// crate method :
=========================================
public function store() {
	Artisan::call('backup:run'); // not working in local but will work in server
	// dd(Artisan::output()); // get output 
}

// download method 
=========================================
public function download(Request $request) {
	$file_name = $request->file_name;
	$file = config('backup.backup.name').'/'.$file_name;
	$disk = Storage::disk(config('backup.backup.destination.disks')[0]);

	if ($disk->exists($file)) {
		$fs = Storage::disk(config('backup.backup.destination.disks')[0])->getDriver();
		$stream = $fs->readStream($file);
		
		return \Response::stream(function () use ($stream) {
			fpassthru($stream);
		}, 200, [
			"Content-Type" => '.zip',
			"Content-Length" => $disk->size($file),
			"Content-disposition" => "attachment; filename=\"" . basename($file) . "\"",
		]);
	}

}

// delete method :
==========================================
public function destroy(Request $request) {
	$file_name = $request->file_name;

	$disk = Storage::disk(config('backup.backup.destination.disks')[0]); 

	if($disk->exists(config('backup.backup.name').'/'.$file_name)){
		$disk->delete(config('backup.backup.name').'/'.$file_name);
		return back();
	}
}



// Backup Data Display in Blade File :
===================================
<form action="{{ route('store') }}" method="post">
	@csrf
	<button>Crate Backup</button>
</form>

===================================
@foreach($backups as $backup)
  <tr>
	<td>{{ $loop->index+1 }}</td>
	<td>{{ $backup['file_name'] }}</td>
	<td>{{ $backup['file_size'] }}</td>
	<td>{{ $backup['created_at'] }}</td>
	<td style="display:flex;">
	  <a href="{{ route('download',['file_name'=>$backup['file_name']]) }}">Download</a>
	  <form action="{{ route('destroy') }}" method="post">
		@csrf
		@method('DELETE')
		<input type="hidden" name="file_name" value="{{ $backup['file_name'] }}">
		<button class="del">Delete</button>
	  </form>
	</td>
  </tr>
@endforeach




